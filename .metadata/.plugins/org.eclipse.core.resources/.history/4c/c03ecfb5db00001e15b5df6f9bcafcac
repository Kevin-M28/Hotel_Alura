package com.hotelAlura.GUI;

import javax.swing.JPanel;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.border.EmptyBorder;

import com.hotelAlura.clases.Cliente;
import com.hotelAlura.clases.Reserva;
import com.hotelAlura.dao.ClientesDao;
import com.hotelAlura.dao.ReservaDao;
import com.hotelAlura.utiles.JPAUtils;
import com.toedter.calendar.JDateChooser;

import jakarta.persistence.EntityManager;

import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ImageIcon;
import java.awt.Cursor;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import java.awt.Font;
import javax.swing.JButton;
import java.awt.Color;
import java.beans.PropertyChangeListener;
import java.util.concurrent.TimeUnit;
import java.beans.PropertyChangeEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;

public class Reservas extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Create the panel.
	 */
	private JPanel Logo;
	private JTextField textTotal;
	private JDateChooser dateSalida;
	private JDateChooser dateEntra;
	private JLabel lblTotal;
	private final Cliente cliente;
	private JComboBox<String> boxPago;

	public Reservas(Cliente c1) {
		this.cliente = c1;
		setBackground(new Color(255, 255, 255));

		Logo = new ImagenPanel("/com/hotelAlura/GUI/Imagenes/Logo.png");
		Logo.setBackground(new Color(255, 255, 255));
		Logo.setBorder(new EmptyBorder(0, 0, 0, 0));
		// Logo.paint(getGraphics());

		dateEntra = new JDateChooser();

		dateEntra.setFont(new Font("Comic Sans MS", Font.PLAIN, 13));
		dateEntra.getCalendarButton().setBorderPainted(false);
		dateEntra.getCalendarButton().setBorder(new EmptyBorder(0, 0, 0, 0));
		dateEntra.getCalendarButton().setContentAreaFilled(false);
		dateEntra.getCalendarButton().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		dateEntra.getCalendarButton()
				.setIcon(new ImageIcon(Reservas.class.getResource("/com/hotelAlura/GUI/Imagenes/calendario.png")));

		dateSalida = new JDateChooser();

		dateSalida.setFont(new Font("Comic Sans MS", Font.PLAIN, 13));
		dateSalida.getCalendarButton()
				.setIcon(new ImageIcon(Reservas.class.getResource("/com/hotelAlura/GUI/Imagenes/calendario.png")));
		dateSalida.getCalendarButton().setContentAreaFilled(false);
		dateSalida.getCalendarButton().setBorderPainted(false);

		JPanel ImagenReserva = new ImagenPanel("/com/hotelAlura/GUI/Imagenes/reservas-img-3.png");
		ImagenReserva.setBackground(new Color(255, 255, 255));
		ImagenReserva.setBorder(new EmptyBorder(0, 0, 0, 0));

		textTotal = new JTextField();
		textTotal.setToolTipText("entityManager");
		textTotal.setHorizontalAlignment(SwingConstants.CENTER);
		textTotal.setFont(new Font("Arial", Font.PLAIN, 13));
		textTotal.setFocusable(false);
		textTotal.setColumns(10);

		JLabel lblNewLabel = new JLabel("Fecha de Entrada");
		lblNewLabel.setFont(new Font("Comic Sans MS", Font.BOLD, 15));
		lblNewLabel.setHorizontalTextPosition(SwingConstants.CENTER);
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);

		JLabel lblNewLabel_1 = new JLabel("Fecha Salida");
		lblNewLabel_1.setFont(new Font("Comic Sans MS", Font.BOLD, 15));
		lblNewLabel_1.setHorizontalTextPosition(SwingConstants.CENTER);
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);

		lblTotal = new JLabel("Total");
		lblTotal.setFont(new Font("Comic Sans MS", Font.BOLD, 15));
		lblTotal.setHorizontalTextPosition(SwingConstants.CENTER);
		lblTotal.setHorizontalAlignment(SwingConstants.CENTER);

		JLabel lblMetodoDePago = new JLabel("Metodo de Pago");
		lblMetodoDePago.setFont(new Font("Comic Sans MS", Font.BOLD, 15));
		lblMetodoDePago.setHorizontalAlignment(SwingConstants.CENTER);
		lblMetodoDePago.setHorizontalTextPosition(SwingConstants.CENTER);

		JButton btnNewButton = new JButton("Reservar");
		
		btnNewButton.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
		btnNewButton.setHorizontalTextPosition(SwingConstants.CENTER);
		
		this.boxPago = new JComboBox<>();
		boxPago.setFocusable(false);
		boxPago.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		boxPago.setFont(new Font("Comic Sans MS", Font.PLAIN, 15));
		boxPago.setModel(new DefaultComboBoxModel<>(new String[] {"Efectivo", "Targeta", "Paypal"}));
		GroupLayout groupLayout = new GroupLayout(this);
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addGap(51)
					.addGroup(groupLayout.createParallelGroup(Alignment.TRAILING, false)
						.addComponent(boxPago, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
							.addGroup(groupLayout.createSequentialGroup()
								.addGap(8)
								.addComponent(Logo, GroupLayout.PREFERRED_SIZE, 152, GroupLayout.PREFERRED_SIZE))
							.addComponent(lblNewLabel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(dateEntra, GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
							.addComponent(lblNewLabel_1, GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
							.addComponent(lblTotal, GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
							.addComponent(textTotal)
							.addComponent(dateSalida, GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
							.addComponent(lblMetodoDePago, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGroup(groupLayout.createSequentialGroup()
							.addComponent(btnNewButton)
							.addGap(44)))
					.addGap(153)
					.addComponent(ImagenReserva, GroupLayout.PREFERRED_SIZE, 393, GroupLayout.PREFERRED_SIZE)
					.addGap(123))
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.TRAILING)
				.addGroup(groupLayout.createSequentialGroup()
					.addGap(72)
					.addComponent(Logo, GroupLayout.PREFERRED_SIZE, 134, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(lblNewLabel, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(dateEntra, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
					.addGap(11)
					.addComponent(lblNewLabel_1, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(dateSalida, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(lblTotal, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textTotal, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
					.addGap(14)
					.addComponent(lblMetodoDePago, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(boxPago, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
					.addGap(27)
					.addComponent(btnNewButton)
					.addContainerGap(107, Short.MAX_VALUE))
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap(116, Short.MAX_VALUE)
					.addComponent(ImagenReserva, GroupLayout.PREFERRED_SIZE, 456, GroupLayout.PREFERRED_SIZE)
					.addGap(90))
		);

		setLayout(groupLayout);
		dateSalida.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				calcularValor();
			}
		});
		dateEntra.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				calcularValor();
			}
		});
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				guardarReserva();
			}
		});
	}

	public void calcularValor() {
		if (this.dateEntra.getDate() != null && this.dateSalida.getDate() != null) {
			Long timepoTrans = this.dateSalida.getDate().getTime() - this.dateEntra.getDate().getTime();
			TimeUnit unidad = TimeUnit.DAYS;
			Long dias = unidad.convert(timepoTrans, TimeUnit.MILLISECONDS);
			this.textTotal.setText(String.valueOf(dias * 40000));
		}
	}
	public void guardarReserva() {
		if (this.dateEntra.getDate() != null && this.dateSalida.getDate() != null) {
			try (JPAUtils entityManagerUtil = new JPAUtils()) {
				EntityManager entityManager = entityManagerUtil.getEntityManager();
				ReservaDao reservaD = new ReservaDao(entityManager);
				ClientesDao clientesD = new ClientesDao(entityManager);
				Reserva reserva = new Reserva(this.dateEntra.getDate(), this.dateSalida.getDate(), Double.valueOf(this.textTotal.getText()),(String) this.boxPago.getSelectedItem());
				reserva.setCliente(cliente);
				cliente.getReservas().add(reserva);
				reservaD.guardarReserva(reserva);
				clientesD.actualizarCliente(cliente);
				JOptionPane.showMessageDialog(this, "Gracias por reservar!");
			} catch (Exception e) {
				System.out.println(e);
				JOptionPane.showMessageDialog(this, "No se pudo realizar la reserva");
			}
			
		}else {
			
		}
	}
}
